// uses the jQuery library to execute a function when the DOM has finished loading and is ready for manipulation
$(document).ready(function () {


    // IMPORTANT!!!!!!!!!!!!!!!!!! When testing the books API please comment out lines 23-44 so we dont burn all of our API usage
    //store the key generated by the Google Books API for our team
    var booksApiKey = "AIzaSyBzxk-Jd5sokQW1oRM9XJS4Np1hbEmum1I"
    //URL for making a request to the Google Books API
    var booksAPI = "https://www.googleapis.com/books/v1/volumes?q="+bookGenre+"&subject:" + bookGenre + "&startIndex=0&maxResults=40&key=" + booksApiKey
    // grabs user selections from local storage
    // index keys are 0=movieGenre 1=bookGenre 2=bookYear 3=movieYear 4=streamSource
    var getChoices = localStorage.getItem('answer');
    // Assign user choices of movie genre, stream source and movie year to variables
    var movieGenre = JSON.parse(getChoices)[0];
    var streamSource = JSON.parse(getChoices)[4];
    var movieYear = JSON.parse(getChoices)[3];
    //Convert the format of ansers provided to the APIquery format of 8digit date written as YYYYMMDD
    var releaseDateStart = (movieYear + "0101")
    var releaseDateEnd = (Number(movieYear)) + 9
    releaseDateEnd = releaseDateEnd.toString() + "1231"

    //store the key generated by the Watchmode API for our team
    var streamKey = "CmuYlyfZgLsyiWCJA2h829wGh6WRb77CHmcowDQP"
    //URL for making a request to the Watchmode API
    //Search by year and genre to get title suggestions for each streaming service
    var streamingAPI = "https://api.watchmode.com/v1/list-titles/?apiKey=" + streamKey + "&genres=" + movieGenre + "&types=movie&source_ids=" + streamSource + "&source_types=sub&release_date_start=" + releaseDateStart + "&release_date_end=" + releaseDateEnd + "&sort_by=relevance_desc"
    //store the key generated by the OMDB API for our team
    var omdbKey = "91e08ef";
    //URL for making a request to the OMDB API
    var omdbInfo = "https://www.omdbapi.com/?apikey=" + omdbKey + "&plot=full&i="

    //function that returns an array with dinamic IDs for title, start, genre and description from the results.html based on the index question
    function createMovieDisplay(index) {
        return ['#result' + index + '-movies-image', '#result' + index + '-title', '#result' + index + '-stars', '#result' + index + '-genre', '#result' + index + '-description'];
    }

    // calls the functions getBook and getMovie 
    getBook();
    getMovie();

    // variables to store book genre and year answers from string to array
    var bookGenre = JSON.parse(getChoices)[1];
    var bookYear = JSON.parse(getChoices)[2];
    // create variables to split the starting year and the end year of the answer to book year range
    var yearRange = bookYear.split('-');
    // store the dates in two different variables and convert its format from string to array
    var startYear = parseInt(yearRange[0]);
    var endYear = parseInt(yearRange[1]);

    var yearArray = [];
    // for loop to push to an empty array  yearArray all the years containing in the selected range
    for (var year = startYear; year <= endYear; year++) {
        yearArray.push(year);
    };
    //fetch request to retrieve data from the booksAPI and return error alert if it did not respond
    function getBook() {
        fetch(booksAPI)
            .then(function (response) {
                if (response.ok) {
                    response.json()
                        .then(function (data) {
                            displayBook(data);
                        });
                } else {
                    alert("Error");
                }
            })
            .catch(function (error) {
                alert("Unable to connect to server");
            });
    }
    //function to display the book data retrieved from the books API
    function displayBook(data) {

        var matchedItems = [];
        //store in a variable the retrieved reference to html relement with id bookContainer
        var Container = document.getElementById('bookContainer');

        //clears the content of the html element from the variable Container
        Container.innerHTML = '';

        //for loop to iterate through the items from the booksAPI
        for (var i = 0; i < data.items.length; i++) {
            //store in a variable the published date for each book on the API
            var publishedDate = data.items[i].volumeInfo.publishedDate;
            console.log(publishedDate)
            if (publishedDate) {
                //converts the strings published date info into an integer, extracting only indexes 0 though 4 of the strings
                var yearPublished = parseInt(publishedDate.substring(0, 4));
            }
            console.log(yearPublished)

            //if statement to check if inside each year iterated from yearPublished is included on the yearArray array
            //and if so, push that item from the API to the initially empty matchedItems array
            if (yearArray.includes(yearPublished)) {
                matchedItems.push(data.items[i]);

                //assign to the parameters the pulled info from the API for that index
                var Title = data.items[i].volumeInfo.title;
                var author = data.items[i].volumeInfo.authors;
                var category = data.items[i].volumeInfo.categories;
                var description = data.items[i].volumeInfo.description;
                var images = data.items[i].volumeInfo.imageLinks.smallThumbnail;
                var bookid = data.items[i].id;
                var buyLink = data.items[i].saleInfo.buyLink;
                var saleability = data.items[i].saleInfo.saleability;
                var publisher = data.items[i].volumeInfo.publisher;

                //recriate the columns div from html to display all books info returned in a column on the left side
                var columnsDiv = document.createElement('div');
                columnsDiv.classList.add('columns');

                var imageColumnDiv = document.createElement('div');
                imageColumnDiv.classList.add('column', 'is-3');

                var imgBtn = document.createElement('a');
                imgBtn.setAttribute('type', 'submit');
                imgBtn.addEventListener('click', displayBookDetail.bind(null, Title, author, category, description, 
                    images, bookid, buyLink, saleability, publisher, publishedDate));

                var bookImage = document.createElement('img');
                bookImage.src = images;
                bookImage.alt = Title;
                bookImage.width = '120';
                bookImage.height = '150';

                var detailsColumnDiv = document.createElement('div');
                detailsColumnDiv.classList.add('column');

                var resultContainer = document.createElement('ul');

                var titleEl = document.createElement('li');
                titleEl.textContent = 'Title: ' + Title;

                var authorEl = document.createElement('li');
                authorEl.textContent = 'Author: ' + author;

                var categoryEl = document.createElement('li');
                categoryEl.textContent = 'Category: ' + category;

                var descriptionEl = document.createElement('li');
                descriptionEl.textContent = 'Description: ' + description;

                Container.appendChild(columnsDiv);
                columnsDiv.appendChild(imageColumnDiv);
                imageColumnDiv.appendChild(imgBtn);
                imgBtn.appendChild(bookImage);
                columnsDiv.appendChild(detailsColumnDiv);
                detailsColumnDiv.appendChild(resultContainer);
                resultContainer.appendChild(titleEl);
                resultContainer.appendChild(authorEl);
                resultContainer.appendChild(categoryEl);
                resultContainer.appendChild(descriptionEl);
            }
        }
        console.log(matchedItems);

    }

    //function to display the details for each book individually upon clicking on the book image
    function displayBookDetail(Title, author, category, description, images, bookid, buyLink, 
        saleability, publisher, publishedDate) {
        var modal = document.createElement('div');
        //add CSS classes "modal" and "is-active" with classList DOM property
        modal.classList.add('modal', 'is-active');
        //adds to the modal all the info inside the quote marks
        //to be dinamically replaced with the jQuery parameters inside curly brackets
        modal.innerHTML = `
                            <div class="modal-background"></div>
                            <div class="modal-card p-4">
                            <header class="modal-card-head">
                                <p class="modal-card-title">${Title}</p>
                                <button class="delete" aria-label="close"></button>
                            </header>
                            <section class="modal-card-body">
                                <img src ='${images}'><br>
                                <b>Author: </b>${author}<br>
                                <b>Category: </b>${category}<br>
                                <b>Description: </b>${description}<br>
                                <b>Bookid: </b>${bookid}<br>
                                <b>Saleability: </b>${saleability}<br>
                                <b>BuyLink: </b> ${buyLink}<br>
                                <b>Publisher: </b>${publisher}<br>
                                <b>PublishedDate: </b>${publishedDate}<br>
                            </section>
                            <footer class="modal-card-foot">
                            </footer>
                            </div>` ;

            modal.querySelector('.delete').addEventListener('click', function () {
            modal.classList.remove('is-active');
        });

        document.body.appendChild(modal);
    }
    //fetch request to retrieve data from the movies API and return 'no data found' alert if it did not respond or the error type
    function getMovie() {
        fetch(streamingAPI)
            .then(function (response) {
                if (response.ok) {
                    response.json().then(function (data) {

                        // console.log(data);
                        if (data.titles.length === 0) {
                            console.log("no data found");
                        }
                        //for loop to iterate through the titles of the movies API, being executed through the length of the array with list of titles, and up to 4 times.
                        for (var i = 0; i < data.titles.length && i < 4; ++i) {
                            //runs the getMovieInfo (to be described below) per loops (described above)
                            getMovieInfo(data.titles[i].imdb_id, createMovieDisplay(i+1))
                        }
                    });
                } else {
                    alert('Error: ' + response.statusText);
                }
            })
            .catch(function (error) {
                alert('Unable to connect to the server')
            });
    }
    function getMovieInfo(imdbId, arr) {
        var getOmdbInfo = omdbInfo + imdbId;
        console.log(getOmdbInfo)
        //fetch request to retrieve data from the Omdb API and return 'no data found' alert if it did not respond or the error type
        fetch(getOmdbInfo)
            .then(function (response) {
                if (response.ok) {
                    response.json().then(function (data) {
                        console.log(data)
                        //use jQuery to modify html attributes (left side of the comma) specified by arr items
                        //do it by setting value from that attribute to the value stored in the API address (right side of the comma)
                        $(arr[0]).attr('src', data.Poster);
                        $(arr[1]).text(data.Title);
                        $(arr[2]).text('Starring: ' + data.Actors);
                        $(arr[3]).text('Genre: ' + data.Genre);
                        $(arr[4]).text('Plot: ' + data.Plot)
                    });
                }
            });
    }
    //function with event listener so that when the user clicks the return button (referred by the id 'return'), it will be rerouted to the initial index.html page 
    document.getElementById('return').addEventListener('click', function () {
        localStorage.clear();
        window.location.href = 'index.html';
    });
});
